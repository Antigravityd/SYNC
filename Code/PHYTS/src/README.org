
* Motivation

Many computational physics tools present Python interfaces these days to exploit the extensive data science tooling available in the language. Also, almost everyone knows it.

PHITS is still based on input cards, which make it both harder to use and less flexible: the card format emphasizes brevity over interpretability, and provides only a limited number of primitive options that require external tools to use them in moderately complex ways.

For example, if one wants to set the horizontal axis of a graph to anything other than linear or logarithmic, it's necessary to generate the points using an external tool and paste them into the input.

Specifying the input via an object system in a general-purpose programming language is both more readable, as objects can be named instead of numbered and "ownership" relationships can be explicit (e.g. a cell "has a" surface), and more expressive, e.g. using comprehension expressions to generate the points in the example above.

* Example


#+begin_src python

  # Construct sections via list comprehensions
  mats = [Material([("C", i/100), ("H", (2/3)*(100-i)/100), ("O", (1/3)*(100-i)/100)]) for i in range(55,100)]

  # Or loops
  cells = [Cell([(Sphere(1), "<")], mats[0], -1)]
  for i in range(1,11):
      new = Cell([(Sphere(i+1), "<") , (Sphere(i), ">")], mats[i], -1)
      cells.append(new)

  # Tallies and other objects that are associated to a particular object can be attributes of that object
  ocean = Void([(Sphere(11), ">")],
               tally=Deposition(Mesh("energy",  [float(i) for i in np.arange(0, 10, 0.25)]), "deposit", "1/source", "reg"))


  cells.append(ocean)

  source = Cylindrical("241Am", 2.2, fissile="neutrons", bounds=(-0.25,0.25), r_out=0.3)


  # Capture input for further analysis in Python as your choice of many common data formats,
  # or render and return the .eps
  # Pass raw input data in case of an error or unimplemented feature
  inp = make_input(cells, source, [], raw="$ This could be e.g. an [Elastic Option] section text.\n",
                   parameters={"negs": 1, "e-mode": 2})

  run_phits(cells, source, [], parameters={"negs": 1, "e-mode": 2})

#+end_src

* Result

The example produces the following result:

#+begin_src phits

  [Title]
  2022-06-29 09:09:18.917314
  [Parameters]
  negs = 1
  e-mode = 2
  [Source]
  s-type = 1
  proj = 241Am
  ispfs = 2
  z0 = -0.25
  z1 = 0.25
  r0 = 0.3
  e0 = 2.2
  [Material]
  MAT[1]
  C 0.55 H 0.3 O 0.15

  MAT[2]
  C 0.56 H 0.29333333333333333 O 0.14666666666666667

  MAT[3]
  C 0.57 H 0.2866666666666666 O 0.1433333333333333

  MAT[4]
  C 0.58 H 0.28 O 0.14

  MAT[5]
  C 0.59 H 0.2733333333333333 O 0.13666666666666666

  MAT[6]
  C 0.6 H 0.26666666666666666 O 0.13333333333333333

  MAT[7]
  C 0.61 H 0.26 O 0.13

  MAT[8]
  C 0.62 H 0.2533333333333333 O 0.12666666666666665

  MAT[9]
  C 0.63 H 0.24666666666666665 O 0.12333333333333332

  MAT[10]
  C 0.64 H 0.24 O 0.12

  MAT[11]
  C 0.65 H 0.2333333333333333 O 0.11666666666666665

  [Surface]
  1 SO 1
  2 SO 2
  3 SO 3
  4 SO 4
  5 SO 5
  6 SO 6
  7 SO 7
  8 SO 8
  9 SO 9
  10 SO 10
  11 SO 11
  [Cell]
  1 1 -1  1
  2 2 -1  2 -1
  3 3 -1  3 -2
  4 4 -1  4 -3
  5 5 -1  5 -4
  6 6 -1  6 -5
  7 7 -1  7 -6
  8 8 -1  8 -7
  9 9 -1  9 -8
  10 10 -1  10 -9
  11 11 -1  11 -10
  12 -1  -11
  [T-Deposit]
  mesh = reg
  reg = 12
  e-type = 1
  ne = 39
  0.0 0.25 0.5 0.75 1.0 1.25 1.5 1.75 2.0 2.25 2.5 2.75 3.0 3.25 3.5 3.75 4.0 4.25 4.5 4.75 5.0 5.25 5.5 5.75 6.0 6.25 6.5 6.75 7.0 7.25 7.5 7.75 8.0 8.25 8.5 8.75 9.0 9.25 9.5 9.75


  output = deposit
  axis = reg

  file = deposit.out
  unit = 3

  $ This could be e.g. an [Elastic Option] section text.

#+end_src

* Code

The architecture of the code is relatively simple.

There's a factory base class, =PhitsObject=, that provides the common initialization, hashing, equality, and text definition methods for consequential objects.

This allows simple definitions of consequential objects, as follows:

#+begin_src python

  class Material(PhitsObject): # Composition is a list of pairs of (<element name string>, <ratio>) e.g. ("8Li", 0.5)
      name = "material"
      required = ["composition"]
      positional = ["composition"]
      optional = ["time_change", "data_max", "mat_name_color", "condensed", "conductive", "electron_step",
                  "neutron_lib", "proton_lib", "electron_lib", "photon_lib", "thermal_lib"]
      shape = (lambda self: f"MAT[{self.index}]",
               (lambda self: "".join(map(lambda tup: f"{tup[0]} {tup[1]} ", self.composition))), "condensed",
               "conductive", "electron_step", "neutron_lib", "proton_lib","electron_lib", "photon_lib",
               lambda self: f"MT{self.index} {self.thermal_lib}" if self.thermal_lib is not None else "")
      subobjects = ["time_change", "data_max", "mat_name_color"]
      ident_map = {"condensed": "GAS", "conductive": "COND", "electron_step": "ESTEP", "neutron_lib": "NLIB",
                   "proton_lib": "HLIB", "electron_lib": "HLIB", "photon_lib": "PLIB"}

#+end_src

The =name= attribute indicates which section the object belongs to, =required= indicates the arguments to the initialization that are required, =positional= indicates those arguments which must be specified positionally, =optional= indicates those additional arguments which are optional and must be specified by keyword, =shape= indicates how the attributes are put into the input file, =subobjects= indicates those arguments which, if given, will be another =PhitsObject=, =ident_map= associates some of the object's attribute names with an alternative name so that =<alternative name> = <value>=  instead of =<attribute name> = <value>= is placed in the input, =value_map= does the same but for the =<value>= part of the equality, and =nones= maps attribute names to the value to place in the file when they're omitted instead of omitting them from the file altogether (e.g. the =non= skip operator).

The shape attribute is a tuple of strings, functions, and more tuples. If an element is a string, it's placed verbatim into the file if it's not an attribute name of the object, and
otherwise =<attribute name> = <attribute value>\n= is placed in the file. If it's a function, that function is called with the object in question as a sole argument and the result of the function is placed into the file verbatim with a trailing newline. If it's a tuple, the same rules apply, but the =<attribute name> == part is omitted and a trailing space instead of a trailing newline is added (for the function objects too). If any string ends with a backslash, the trailing newline is instead a space. Additionally, the two spaces on either side of the equals sign are removed, if an equals sign were otherwise to appear in the input file.

* More Code

The end user constructs cells, sources, and any non-cellwise tallies themselves, and passes them to =run_phits()=.  The work of constructing the input file is done in =make_input()=, which first puts all the passed objects in a Python =set= to ensure uniqueness (according to the definition of equality defined on =PhitsObject=), and then constructs the =type_divided= dictionary of lists that separates the objects by the section they are to end up in, also fixing the order in which they'll appear.

The objects are then given an index corresponding to their index in the list in =type_divided=, and replaces objects in the class hierarchy with the object in =type_divided= to which they are equal (since someone could initialize two =Surface= objects with identical arguments that are distinct in the eyes of Python).

It's then a simple matter of constructing the string representing the input file via each object's =definition()= method, which is done with the help of an =add_defs()= function to eliminate boilerplate.

=run_phits()= is quite simple: it creates a temporary folder, changes to it, creates the =.inp= file from the string returned by =make_input()=, and uses the =subprocess= library to run a shell command on that file to execute PHITS (by default, the =phits= shell script I wrote to make the calling syntax POSIX-compliant). A function (incomplete) that scrapes the result of the computation is then run, and that result is returned (ideally in the format of the user's choice: a =dict=, a Pandas dataframe, a Numpy array, or a =matplotlib= figure representing the same plot that PHITS would have constructed).

* TODOs

The central unimplemented functionality is the output parsing. I have half a parser for AnGeL input files written; that'll do it once it's done.

The core object model currently doesn't support a few edge cases: the multiplier section, energy-distributed sources, and all but the first 5 tallies.

It would be nice if the Fortran-Python interop would make it possible to write the user-defined sources, cross-sections, functions, and tallies in Python. Similarly, defining the (electro)magnetic field files and other external files via Python would be feasible.
