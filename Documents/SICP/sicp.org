
Problems from Chapter 1 of SICP

* 1.1

Below is a sequence of expressions.
What is the result printed by the interpreter in response to each expression?
Assume that the sequence is to be evaluated in the order in which it is presented.

#+begin_src scheme

  10

  (+ 5 3 4)

  (- 9 1)

  (/ 6 2)

  (+ (* 2 4)
     (- 4 6))

  (define a 3)

  (define b (+ a 1))

  (+ a b (* a b))

  (= a b)

  (if (and (> b a)
           (< b (* a b)))
      b
      a)

  (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))

  (+ 2 (if (> b a)
           b
           a))

  (* (cond ((> a b) a)
           ((< a b) b)
           (else -1))
     (+ a 1))

#+end_src

---

-  10
-  12
-  8
-  3
-  6
-
-  4
-  19
-  #f
-  4
-  16
-  6
-  16

* 1.2

Translate the following expression into prefix form: $\frac{5 + 4 + (2 - (3 - (6 + \frac{4}{5})))}{3(6 - 2)(2 - 7)}$.

#+begin_src scheme

  (/ (+ 5 4 (- 2
               (- 3
                  (+ 6 4/5))))
     (* 3 (- 6 2) (- 2 7)))

#+end_src

* 1.3

Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.

---

#+begin_src scheme

  (define (square x)
    (* x x))

  (define (soln a b c)
    (- (+ (square a)
          (square b)
          (square c))
       (square (min a b c))))

#+end_src

* 1.4

Observe that our model of evaluation allows for combinations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure:

#+begin_src scheme

  (define (a-plus-abs-b a b)
    ((if (> b 0) + -) a b))

#+end_src

---

The the first entry in the body is evaluated to + if b > 0, and + otherwise. This results in the procedure implementing $a + |b|$.

* 1.5

Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:

#+begin_src scheme

  (define (p) (p))

  (define (test x y)
    (if (= x 0)
        0
        y))

  ;; Then he evaluates the expression

  (test 0 (p))

#+end_src

What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form =if= is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)

---

If applicative-order evaluation is used, in the call to =test= the argument =(p)= must be evaluated. The body of =p='s definition is a call to =p=---so the program hangs. Conversely, if normal-order evaluation is used, the call is expanded to =(if (â€‹= 0 0) 0 (p))=---according to the behavior of =if= above, the predicate expression is evaluated to =#t=, and then the value of the form is returned as =0=, not evaluating the call to =p= at all.

* 1.6

Alyssa P. Hacker doesn't see why =if= needs to be provided as a special form. "Why can't I just define it as an ordinary procedure in terms of cond?" she asks. Alyssa's friend Eva Lu Ator claims this can indeed be done, and she defines a new version of =if=:

#+begin_src scheme

  (define (new-if predicate then-clause else-clause)
    (cond (predicate then-clause)
          (else else-clause)))

#+end_src

Eva demonstrates the program for Alyssa:

#+begin_src scheme

  (new-if (= 2 3) 0 5)
  ;; => 5

  (new-if (= 1 1 ) 0 5)
  ;; => 0

#+end_src

Delighted, Alyssa uses =new-if= to rewrite the square-root program:

#+begin_src scheme

  (define (sqrt-iter guess x)
    (new-if (good-enough? guess x)
            guess
            (sqrt-iter (improve guess x)
                       x)))

#+end_src

What happens when Alyssa attempts to use this to compute square roots? Explain.

---

The problem with making =if= a procedure is that it would have the normal procedure call semantics---i.e. evaluating its arguments before applying the procedure. This fails in the case of many recursive definitions, like the one given: calling =sqrt-iter= will, in the body of the definition, evaluate all arguments to =new-if= first. This results in, particularly, the recursive call to =sqrt-iter= in the =else-clause= position being evaluated /before any decision logic can kick in and stop it/. This means that, even if we call =sqrt-iter= with =guess= such that =(square guess)= equals =x=, the call to =sqrt-iter= must still be evaluated---which in turn has the same problem, hanging the evaluation.

* 1.7

The =good-enough?= test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for large and small numbers. An alternative strategy for implementing =good-enough?= is to watch how =guess= changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

---

For very small numbers, the 0.001 target chosen for =good-enough?= will be less than both the number and its square. For very large numbers, 0.001 will be smaller than the difference between adjacent IEEE floating-point numbers, and so finding something between them will be impossible.  Examples:

#+begin_src scheme

  (define (square x)
    (* x x))

  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))

  (good-enough? 0.0000004 0.0000005)
  ;; => #t

  (- 1.34e35 (+ 1.34e35 (* 5 0.001)))
  ;; => 0.0

#+end_src

Here's an alternative procedure, and some tests demonstrating its superiority:

#+begin_src scheme

  (define (square x)
    (* x x))

  (define (average x y)
    (/ (+ x y) 2))

  (define (improve guess x)
    (average guess (/ x guess)))

  (define (good-enough? guess x last-guess)
    (if last-guess
        (< (abs (/ (- guess last-guess)
                   last-guess)) 0.0001)
        #f))

  (define (sqrt-iter guess x last-guess)
    (if (good-enough? guess x last-guess)
        guess
        (sqrt-iter (improve guess x)
                   x
                   guess)))

  (define (sqrt x)
    (sqrt-iter 1.0 x #f))

  (sqrt 2.323432e35)
  ;; 482019916600963700.0

  (sqrt 2.323432e-35)
  ;; => 4.820199166009637e-18

#+end_src

* 1.8

Newton's method for cube roots is based on the fact that if $y$ is an approximation to the cube root of $x$, then a better approximation is given by the value $\frac{x/y^2 + 2y}{3}$. Use this formula to implement a cube-root procedure analogous to the square-root -rocedure (In section 1.3.4 we shall see how to implement Neton's method in general as an abstraction of these square-root and cube-root procedures.)

---

#+begin_src scheme

  (define (square x)
    (* x x))

  (define (improve guess x)
    (/ (+ (/ x (square guess))
          (* 2 guess))
       3))

  (define (good-enough? guess x last-guess)
    (if last-guess
        (< (abs (/ (- guess last-guess)
                   last-guess)) 0.0001)
        #f))

  (define (cbrt-iter guess x last-guess)
    (if (good-enough? guess x last-guess)
        guess
        (cbrt-iter (improve guess x)
                   x
                   guess)))

  (define (cbrt x)
    (cbrt-iter 1.0 x #f))

  (cbrt 2)
  ;; => 1.25992104989

  (cbrt 8)
  ;; => 2.000000000012062

#+end_src

* 1.9

Each of the following two procedures defines a method for adding two positive integers in terms of the procedures =inc=, which increments its arguments by 1, and =dec=, which decrements its arguments by 1.

#+begin_src scheme

  (define (+ a b)
    (if (= a 0)
        b
        (inc (+ (dec a) b))))

  (define (+ a b)
    (if (= a 0)
        b
        (+ (dec a) (inc b))))

#+end_src

Using the substitution model, illustrate the process generated by each procedure in evaluating =(+ 4 5)=. Are these processes iterative or recursive?

---

With the first procedure:

#+begin_src scheme

  (+ 4 5)
  (inc (+ 3 5))
  (inc (inc (+ 2 5)))
  (inc (inc (inc (+ 1 5))))
  (inc (inc (inc (inc (+ 0 5)))))
  (inc (inc (inc (inc 5))))
  (inc (inc (inc 6)))
  (inc (inc 7))
  (inc 8)
  9

#+end_src

This is clearly recursive.

With the second procedure:

#+begin_src scheme

  (+ 4 5)
  (+ 3 6)
  (+ 2 7)
  (+ 1 8)
  (+ 0 9)
  9

#+end_src

This is clearly iterative.

* 1.10

The following procedure computes a mathematical function called Ackermann's function.

#+begin_src scheme

  (define (A x y)
    (cond ((= y 0) 0)
          ((= x 0) (* 2 y))
          ((= y 1) 2)
          (else (A (- x 1)
                   (A x (- y 1))))))

#+end_src

What are the values of the following expressions?

#+begin_src scheme

  (A 1 10)

  (A 2 4)

  (A 3 3)

#+end_src

Consider the following procedures, where =A= is the procedure defined above:

#+begin_src scheme

  (define (f n) (A 0 n))

  (define (g n) (A 1 n))

  (define (h n) (A 2 n))

  (define (k n) (* 5 n n ))

#+end_src

Give concise mathematical definitions for the functions computed by the procedures =f=, =g=, and =h= for positive integer values of $n$. For example, =(k n)= computes $5n^2$.

---

The expressions evaluate to:

- =1024=
- =65536=
- =65536=

  The procedures are:

  - $2n$
  - $2^n$
  - $2\uparrow n$

* 1.11

A function $f$ is defined y the rule that $f(n) = n$ if $n < 3$ and $f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3)$ if $n \geq 3$. Write a procedure that computes $f$ by means of a recursive process. Write a procedure that computes $f$ by means of an iterative process.

---

A recursive $f$:

#+begin_src scheme

  (define (f n)
    (if (< n 3)
        n
        (+ (f (- n 1))
           (* 2 (f (- n 2)))
           (* 3 (f (- n 3))))))

#+end_src

And an iterative $f$:

#+begin_src scheme

  (define (f-iter maxn running ndx fndx-1 fndx-2 fndx-3)
    (if (> ndx maxn)
        running
        (f-iter maxn
                (+ fndx-1 (* 2 fndx-2) (* 3 fndx-3))
                (+ ndx 1)
                (+ fndx-1 (* 2 fndx-2) (* 3 fndx-3))
                fndx-1
                fndx-2)))

  (define (f n)
    (f-iter n 0 3 2 1 0))

#+end_src

* 1.12

The following pattern of numbers is called /Pascal's triangle/.

        1
      1 1
    1 2 1
  1 3 3 1
1 4 6 4 1
      ...
The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it. Write a procedure that computes elements of Pascal's triangle by means of a recursive process.

#+begin_src scheme

  (define (pascal-entry row col)
    (if (not (<= 0 col row))
        1
        (+ (pascal-entry (- row 1)
                         (- col 1))
           (pascal-entry (- row 1)
                         col))))
  (<= 0 )
  (pascal-entry 2 1)
#+end_src
